{
  "info": {
    "_postman_id": "f8c7a3b2-5d4e-4c8a-9b6f-1e2d3a4b5c6d",
    "name": "NestJS Microservices - Complete System",
    "description": "Complete API collection for testing NestJS microservices with Product Catalog, Order Management, Payment Processing, and PostgreSQL databases.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Product Catalog",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has products array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.data.length).to.be.above(0);",
                  "});",
                  "",
                  "// Save first product code for testing",
                  "if (pm.response.json().data.length > 0) {",
                  "    pm.environment.set(\"productCode\", pm.response.json().data[0].productCode);",
                  "    pm.environment.set(\"productId\", pm.response.json().data[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products"
              ]
            },
            "description": "Retrieves all available products from the catalog with stock information, pricing, and metadata."
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "{{productId}}"
              ]
            },
            "description": "Get specific product details by product UUID"
          },
          "response": []
        },
        {
          "name": "Get Product by Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product has stock information\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stockQuantity');",
                  "    pm.expect(jsonData.data).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/code/LAPTOP-001",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "products",
                "code",
                "LAPTOP-001"
              ]
            },
            "description": "Get product by its unique product code (SKU)"
          },
          "response": []
        }
      ],
      "description": "Product catalog management endpoints"
    },
    {
      "name": "Order Service",
      "item": [
        {
          "name": "Create Order with Product Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Order created with product details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.data).to.have.property('productCode');",
                  "    pm.expect(jsonData.data).to.have.property('productName');",
                  "    pm.expect(jsonData.data).to.have.property('unitPrice');",
                  "    pm.expect(jsonData.data).to.have.property('totalAmount');",
                  "});",
                  "",
                  "// Save order ID for later use",
                  "if (pm.response.json().data.id) {",
                  "    pm.environment.set(\"orderId\", pm.response.json().data.id);",
                  "    if (pm.response.json().data.status === 'PAYMENT_FAILED') {",
                  "        pm.environment.set(\"failedOrderId\", pm.response.json().data.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productCode\": \"LAPTOP-001\",\n    \"quantity\": 1,\n    \"customerId\": \"CUST-{{$randomInt}}\",\n    \"customerEmail\": \"{{$randomEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Creates order using product code. System automatically fetches product details, validates stock, calculates pricing, and processes payment."
          },
          "response": []
        },
        {
          "name": "Create Order - iPhone",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productCode\": \"PHONE-001\",\n    \"quantity\": 1,\n    \"customerId\": \"CUST-{{$randomInt}}\",\n    \"customerEmail\": \"{{$randomEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Order an iPhone 15 Pro"
          },
          "response": []
        },
        {
          "name": "Create Order - AirPods",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productCode\": \"HEADPHONE-001\",\n    \"quantity\": 2,\n    \"customerId\": \"CUST-{{$randomInt}}\",\n    \"customerEmail\": \"{{$randomEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Order AirPods Pro (quantity: 2)"
          },
          "response": []
        },
        {
          "name": "Create Order - Invalid Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500\", function () {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test(\"Error message for invalid product\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.error).to.include('not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productCode\": \"INVALID-999\",\n    \"quantity\": 1,\n    \"customerId\": \"CUST-TEST\",\n    \"customerEmail\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Tests validation with invalid product code"
          },
          "response": []
        },
        {
          "name": "Create Order - Insufficient Stock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 500\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});",
                  "",
                  "pm.test(\"Error message for insufficient stock\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "    pm.expect(jsonData.error || jsonData.message).to.include('Insufficient stock');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productCode\": \"LAPTOP-001\",\n    \"quantity\": 1000,\n    \"customerId\": \"CUST-BULK\",\n    \"customerEmail\": \"bulk@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Tests stock validation by ordering more than available"
          },
          "response": []
        },
        {
          "name": "Retry Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Payment retry processed\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(true);",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "    });",
                  "} else if (pm.response.code === 400) {",
                  "    pm.test(\"Cannot retry successful payment\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.eql(false);",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/{{failedOrderId}}/retry-payment",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "{{failedOrderId}}",
                "retry-payment"
              ]
            },
            "description": "Retry payment for a failed order. Only works if order status is PAYMENT_FAILED. Will validate stock availability before retrying."
          },
          "response": []
        },
        {
          "name": "Get Order by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Order has product details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('productCode');",
                  "    pm.expect(jsonData.data).to.have.property('unitPrice');",
                  "    pm.expect(jsonData.data).to.have.property('totalAmount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "{{orderId}}"
              ]
            },
            "description": "Get order details including product information and payment status"
          },
          "response": []
        },
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Get all orders with their current status and product details"
          },
          "response": []
        },
        {
          "name": "Health Check - Order Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/health/check",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders",
                "health",
                "check"
              ]
            },
            "description": "Check Order Service health"
          },
          "response": []
        }
      ],
      "description": "Order management with product catalog integration"
    },
    {
      "name": "Payment Service",
      "item": [
        {
          "name": "Get All Payments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/payments",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "payments"
              ]
            },
            "description": "Get all payment records with summary statistics"
          },
          "response": []
        },
        {
          "name": "Get Successful Payments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/payments?status=SUCCESS",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "payments"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "SUCCESS"
                }
              ]
            },
            "description": "Filter payments by SUCCESS status"
          },
          "response": []
        },
        {
          "name": "Get Failed Payments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/payments?status=FAILED",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "payments"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "FAILED"
                }
              ]
            },
            "description": "Filter payments by FAILED status with failure reasons"
          },
          "response": []
        },
        {
          "name": "Get Payment by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/payments/{{paymentId}}",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "payments",
                "{{paymentId}}"
              ]
            },
            "description": "Get specific payment details"
          },
          "response": []
        },
        {
          "name": "Get Payment by Order ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/payments/order/{{orderId}}",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "payments",
                "order",
                "{{orderId}}"
              ]
            },
            "description": "Get payment for specific order"
          },
          "response": []
        },
        {
          "name": "Get Payment Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/payments/stats/summary",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "payments",
                "stats",
                "summary"
              ]
            },
            "description": "Get comprehensive payment statistics"
          },
          "response": []
        },
        {
          "name": "Health Check - Payment Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{paymentServiceUrl}}/health",
              "host": [
                "{{paymentServiceUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Check Payment Service health"
          },
          "response": []
        }
      ],
      "description": "Payment processing and monitoring"
    },
    {
      "name": "Test Scenarios",
      "item": [
        {
          "name": "Full Order Flow Test",
          "item": [
            {
              "name": "1. Check Product Stock",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/products/code/LAPTOP-001",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "products",
                    "code",
                    "LAPTOP-001"
                  ]
                },
                "description": "Check current stock before ordering"
              },
              "response": []
            },
            {
              "name": "2. Create Order",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productCode\": \"LAPTOP-001\",\n    \"quantity\": 1,\n    \"customerId\": \"CUST-FLOW-TEST\",\n    \"customerEmail\": \"flow.test@example.com\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/orders",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "orders"
                  ]
                },
                "description": "Create order and process payment"
              },
              "response": []
            },
            {
              "name": "3. Check Updated Stock",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/products/code/LAPTOP-001",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "products",
                    "code",
                    "LAPTOP-001"
                  ]
                },
                "description": "Verify stock was updated"
              },
              "response": []
            },
            {
              "name": "4. Check Payment Record",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{paymentServiceUrl}}/payments/order/{{orderId}}",
                  "host": [
                    "{{paymentServiceUrl}}"
                  ],
                  "path": [
                    "payments",
                    "order",
                    "{{orderId}}"
                  ]
                },
                "description": "Verify payment was processed"
              },
              "response": []
            }
          ],
          "description": "Complete flow from product selection to payment"
        },
        {
          "name": "Payment Retry Flow",
          "item": [
            {
              "name": "1. Stop Payment Service",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/orders/health/check",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "orders",
                    "health",
                    "check"
                  ]
                },
                "description": "Manual step: Stop payment service with 'docker-compose stop payment-service'"
              },
              "response": []
            },
            {
              "name": "2. Create Order (Will Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"productCode\": \"MOUSE-001\",\n    \"quantity\": 1,\n    \"customerId\": \"CUST-RETRY-TEST\",\n    \"customerEmail\": \"retry.test@example.com\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/orders",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "orders"
                  ]
                },
                "description": "Create order while payment service is down"
              },
              "response": []
            },
            {
              "name": "3. Start Payment Service",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{paymentServiceUrl}}/health",
                  "host": [
                    "{{paymentServiceUrl}}"
                  ],
                  "path": [
                    "health"
                  ]
                },
                "description": "Manual step: Start payment service with 'docker-compose start payment-service'"
              },
              "response": []
            },
            {
              "name": "4. Retry Payment",
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/orders/{{failedOrderId}}/retry-payment",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "orders",
                    "{{failedOrderId}}",
                    "retry-payment"
                  ]
                },
                "description": "Retry the failed payment"
              },
              "response": []
            }
          ],
          "description": "Test payment retry functionality"
        },
        {
          "name": "Load Test - 10 Orders",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const products = ['LAPTOP-001', 'PHONE-001', 'HEADPHONE-001', 'TABLET-001', 'WATCH-001'];",
                  "pm.variables.set(\"randomProductCode\", products[Math.floor(Math.random() * products.length)]);",
                  "pm.variables.set(\"randomQuantity\", Math.floor(Math.random() * 3) + 1);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"productCode\": \"{{randomProductCode}}\",\n    \"quantity\": {{randomQuantity}},\n    \"customerId\": \"CUST-{{$randomInt}}\",\n    \"customerEmail\": \"loadtest{{$randomInt}}@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "orders"
              ]
            },
            "description": "Run with Collection Runner (10 iterations) to test system under load"
          },
          "response": []
        }
      ],
      "description": "End-to-end test scenarios"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "paymentServiceUrl",
      "value": "http://localhost:3002",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "failedOrderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productCode",
      "value": "LAPTOP-001",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "paymentId",
      "value": "",
      "type": "string"
    }
  ]
}